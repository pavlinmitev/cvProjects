#pragma checksum "C:\Users\Pavlin1\Downloads\BullAndCows (1)\WebApplication1\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "78fd3b2643db1f49a7c2fc2f65bdd7cdb85988a1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Pavlin1\Downloads\BullAndCows (1)\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1;

#line default
#line hidden
#line 2 "C:\Users\Pavlin1\Downloads\BullAndCows (1)\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"78fd3b2643db1f49a7c2fc2f65bdd7cdb85988a1", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"729efaa87342638aecfe1a972ce9f9f8dff55b4c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/personalCSS.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\Pavlin1\Downloads\BullAndCows (1)\WebApplication1\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
            BeginContext(43, 8, true);
            WriteLiteral("<br />\r\n");
            EndContext();
            BeginContext(51, 54, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "d256a1b171f849ee8dd2046148bbfb77", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(105, 592, true);
            WriteLiteral(@"
<div class=""center"">
    <h2>Enter A 4 digit Number with different digits</h2>
</div>
<div>
<div class=""center""></div>
<p id=""error"" style=""color:red;""></p>
<div class=""green-square"">
    <div>
        <input type=""number"" id=""num"" style=""width:200px;"" class=""form-control "" />
    </div>

    <div class=""inner-b"">
        <button id=""bt"" class=""btn-success form-control "" style=""width:100px;"">Enter</button>
    </div>

</div>

<p id=""res""> </p>
<div  class=""move-down"">
    <ul id=""resultList"" class=""list-group""></ul>
</div>
    </div>

<br />
<br />
<br />

");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(714, 6933, true);
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            $(""#bt"").click(function (event) {
                event.preventDefault();
            });
            $(""#bt"").click(SendDataToController);

            function SendDataToController() {
                let counter = 0;
                let tr = true;
                let num = $(""#num"").val();
                let arr = [];
                let arr2 = [];
                var numS = num.toString();
                for (let i = 0; i < numS.length; i++) {
                    if (!arr2.includes(numS[i])) {
                        arr2.push(numS[i])

                    }
                    else {
                       
                        let errorBox = $('#error');
                        errorBox.html(""invalid"");
                        errorBox.fadeIn();
                        setTimeout(() => errorBox.fadeOut(), 3000);
                        tr = false;
                        break;
                    }
     ");
                WriteLiteral(@"               counter++;
                }
                if (tr == true && numS.length === 4) {

                    let result = finalResult();
                    let date = new Date().toLocaleString();
                   
                    




                    $.ajax({
                        url: ""/api/GameApi/play"",

                        method: ""GET"",
                        data: {
                            Counter: result.Counter,
                            Date: new Date().toLocaleString(),
                            Numbers: num,
                            Duration: Number(date.toString().split("":"")[1].split("" "")[0]) - Number(new Date().toLocaleString().toString().split("":"")[1].split("" "")[0])

                        }
                    })
                        .then(function (res) {
                            console.log(res);
                        })
                        .catch(function () {
                            let errorBox = $('#error");
                WriteLiteral(@"');
                            errorBox.text(""You must be logged in"");
                            errorBox.fadeIn();
                            setTimeout(() => errorBox.fadeOut(), 3000);
                        });

                }
            }
        })
    </script>
    <script>
        function finalResult() {
            var element = document.getElementById(""resultList"");
            element.innerHTML = """";
            var number = Number(document.getElementById(""num"").value);

            var guess = solve();


            let bulls = 0;
            let cows = 0;
            let counter = 0;

            while (bulls != 4 || (bulls == 2 && cows == 2)) {
                let cowIndex = [];
                let BullIndex = [];
                var num = number.toString().split('');
                var num2 = guess.toString().split('');
                bulls = 0;
                cows = 0;
                for (let i = 0; i < number.toString().length; i++) {
              ");
                WriteLiteral(@"      for (let j = 0; j < number.toString().length; j++) {
                        if (num2[i] == num[j] && i == j) {

                            bulls++;
                            BullIndex.push(j);
                            break;



                        }
                        else if (num2[i] == num[j]) {
                            cowIndex.push(j);
                            cows++;
                        }
                    }
                }

                if (bulls == 4 || (bulls == 2 && cows == 2)) {
                    counter++;
                    console.log(""Number guessed after "" + counter + "" tries"");
                    return { Counter: counter };
                }
                else {
                    let checkIfSame = false;
                    let cowUsedIndexes = [];
                    let cowNumbers = [];

                    for (let i = 0; i < cowIndex.length; i++) {
                        var n = Number(num[cowIndex[i]].toString())");
                WriteLiteral(@";

                        cowNumbers.push(n);
                    }
                    var array = [];
                    for (let i = 0; i < 4; i++) {
                        array[i] = -1;
                    }
                    for (let i = 0; i < BullIndex.length; i++) {
                        array[BullIndex[i]] = Number(num[BullIndex[i]].toString());
                    }
                    for (let i = 0; i < array.length; i++) {
                        if (array[i] == -1) {
                            while (cowNumbers.Count > 0) {

                                var index = getRndInteger(0, cowNumbers.length);

                                array[i] = cowNumbers[index];
                                cowUsedIndexes.push(index);
                                cowNumbers.splice(index, 1);



                            }
                        }

                    }
                    var list = [];
                    list.push(array[0]);
                  ");
                WriteLiteral(@"  list.push(array[1]);
                    list.push(array[2]);
                    list.push(array[3]);

                    for (let i = 0; i < 4; i++) {
                        if (array[i] == -1) {


                            var nums = getRndInteger(0, 10);

                            while (list.includes(nums)) {
                                nums = getRndInteger(0, 10);
                            }

                          
                            array[i] = nums;

                        }
                    }
                    var final = Number(array.join(''));
                    guess = final;
                    let rList = document.getElementById(""resultList"");
                    let li = document.createElement(""li"");
                    li.textContent = guess;
                    li.className = ""list-group-item list-group-item-action"";
                    rList.appendChild(li);
                    counter++;
                    



                ");
                WriteLiteral(@"}
            }


        }




    </script>



    <script>

        function solve() {

            var check = false;
            while (check == false) {
                var n1 = getRndInteger(1000, 9999);
                var charArr = n1.toString().split('');
                for (let i = 0; i < n1.toString().length - 1; i++) {
                    if (charArr[i] == charArr[i + 1]) {
                        check = false;
                        break;

                    }
                    check = true;

                }
            }
            return n1;

        }
    </script>

    <script>
        function getRndInteger(min, max) {
            return Math.floor(Math.random() * (max - min)) + min;
        }
    </script>

");
                EndContext();
            }
            );
            BeginContext(7650, 2, true);
            WriteLiteral("\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
